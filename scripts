# object_detection.py
# Description: Object Detection using TensorFlow SSD MobileNetV2 pretrained on COCO dataset

import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
from matplotlib import pyplot as plt
from random import randint
import os

# ===============================
# Step 1: Download & Extract Model (Colab/Linux Only)
# ===============================
!wget http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz
!tar -xzvf ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz

# ===============================
# Step 2: Load Pre-trained Model
# ===============================
MODEL_PATH = "ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/saved_model"

if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError("Model not found. Please download and extract before running.")

model = tf.saved_model.load(MODEL_PATH)

# ===============================
# Step 3: Load Image
# ===============================
IMAGE_PATH = "sample_image.png"

image = Image.open(IMAGE_PATH).convert('RGB')
image_np = np.array(image)
input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.uint8)

# ===============================
# Step 4: Run Object Detection
# ===============================
detection = model(input_tensor)

boxes = detection['detection_boxes'].numpy()
classes = detection['detection_classes'].numpy().astype(int)
scores = detection['detection_scores'].numpy()

# COCO Labels
labels = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter',
    'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra',
    'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis',
    'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
    'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana',
    'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake',
    'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse',
    'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator',
    'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

# ===============================
# Step 5: Draw Bounding Boxes
# ===============================
for i in range(classes.shape[1]):
    class_id = int(classes[0, i])
    score = scores[0, i]

    if score > 0.5:  # Confidence threshold
        h, w, _ = image_np.shape
        ymin, xmin, ymax, xmax = boxes[0, i]

        # Convert normalized coordinates to pixel values
        xmin = int(xmin * w)
        xmax = int(xmax * w)
        ymin = int(ymin * h)
        ymax = int(ymax * h)

        # Get class name
        class_name = labels[class_id]

        # Assign random color
        random_color = (randint(0, 256), randint(0, 256), randint(0, 256))

        # Draw bounding box
        cv2.rectangle(image_np, (xmin, ymin), (xmax, ymax), random_color, 2)
        label = f"{class_name}: {score:.2f}"
        cv2.putText(image_np, label, (xmin, ymin - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, random_color, 2)

# ===============================
# Step 6: Display & Save Output
# ===============================
plt.imshow(image_np)
plt.axis('off')
plt.show()

